swagger: "2.0"
info:
  description: "This is my lab"
  version: "1.0.0"
  title: "Advertisement Board"
tags:
- name: "advertisement"
  description: "Everything about your advertisements"
- name: "board"
  description: "Access to Advertisement Board"
- name: "user"
  description: "Operations about user"
schemes:
- "https"
- "http"

paths:
  /advertisement:
    post:
      tags:
      - "advertisement"
      parameters:
      - in: "body"
        name: "body"
        description: "Advertisement that needs to be added to the Board"
        required: true
        schema:
          $ref: "#/definitions/Advertisement"
      responses:
        "200":
          description: "Successful"
        "405":
          description: "Invalid input"
      security:
      - petstore_auth:
        - "write:advertisements"
        - "read:advertisements"
    put:
      tags:
      - "advertisement"
      summary: "Update an existing advertisement"
      description: ""
      operationId: "updateAdvertisement"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Advertisement that needs to be added to the Board"
        required: true
        schema:
          $ref: "#/definitions/Advertisement"
      responses:
        "200":
          description: "Successful"
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Advertisement not found"
        "405":
          description: "Validation exception"
      security:
      - petstore_auth:
        - "write:advertisements"
        - "read:advertisements"

  /advertisement/{advertisementId}:
    get:
      tags:
      - "advertisement"
      summary: "Find advertisement by ID"
      description: "Returns a single advertisement"
      operationId: "getAdvertisementById"
      produces:
      - "application/json"
      parameters:
      - name: "advertisementId"
        in: "path"
        description: "ID of advertisement to return"
        required: true
        type: "integer"
        format: "int64"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/Advertisement"
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Advertisement not found"
      security:
      - api_key: []
    post:
      tags:
      - "advertisement"
      summary: "Updates an advertisement in the Board with form data"
      description: ""
      operationId: "updateAdvertisementWithForm"
      consumes:
      - "application/x-www-form-urlencoded"
      produces:
      - "application/json"
      parameters:
      - name: "advertisementId"
        in: "path"
        description: "ID of advertisement that needs to be updated"
        required: true
        type: "integer"
        format: "int64"
      - name: "quanntity"
        in: "formData"
        description: "Updated quantity of products"
        required: false
        type: "integer"
        format: "int64"
      - name: "status"
        in: "formData"
        description: "Updated status of the advertisement"
        required: false
        type: "string"
      - name: "updateDate"
        in: "formData"
        description: "Updated date of editing"
        required: true
        type: "string"
      - name: "productId"
        in: "formData"
        description: "Change product by ID"
        required: false
        type: "string"
      - name: "name"
        in: "formData"
        description: ""
        type: "string"
      - name: "description"
        in: "formData"
        description: ""
        type: "string"
      responses:
        "200":
          description: "Successful"
        "405":
          description: "Invalid input"
      security:
      - petstore_auth:
        - "write:advertisements"
        - "read:advertisements"
    delete:
      tags:
      - "advertisement"
      summary: "Delete an advertisement"
      description: ""
      operationId: "deleteAdvertisement"
      produces:
      - "application/json"
      parameters:
      - name: "advertisementId"
        in: "path"
        description: "Advertisement ID to delete"
        required: true
        type: "integer"
        format: "int64"
      responses:
        "200":
          description: "Successful"
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Advertisement not found"
      security:
      - petstore_auth:
        - "write:advertisements"
        - "read:advertisements"

  /user:
    post:
      tags:
      - "user"
      summary: "Create user"
      description: "This can only be done by the logged in user."
      operationId: "createUser"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Created user object"
        required: true
        schema:
          $ref: "#/definitions/User"
      responses:
        default:
          description: "successful operation"
  /user/login:
    get:
      tags:
      - "user"
      summary: "Logs user into the system"
      description: ""
      operationId: "loginUser"
      produces:
      - "application/json"
      parameters:
      - name: "username"
        in: "query"
        description: "The user name for login"
        required: true
        type: "string"
      - name: "password"
        in: "query"
        description: "The password for login in clear text"
        required: true
        type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "string"
          headers:
            X-Rate-Limit:
              type: "integer"
              format: "int32"
              description: "calls per hour allowed by the user"
            X-Expires-After:
              type: "string"
              format: "date-time"
              description: "date in UTC when token expires"
        "400":
          description: "Invalid username/password supplied"
  /user/logout:
    get:
      tags:
      - "user"
      summary: "Logs out current logged in user session"
      description: ""
      operationId: "logoutUser"
      produces:
      - "application/json"
      parameters: []
      responses:
        default:
          description: "successful operation"
      security:
      - api_key: []
  /user/{username}:
    get:
      tags:
      - "user"
      summary: "Get user by user name"
      description: ""
      operationId: "getUserByName"
      produces:
      - "application/json"
      parameters:
      - name: "username"
        in: "path"
        description: "The name that needs to be fetched. Use user1 for testing. "
        required: true
        type: "string"
      security:
      - api_key: []
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/User"
        "400":
          description: "Invalid username supplied"
        "404":
          description: "User not found"
        
    put:
      tags:
      - "user"
      summary: "Updated user"
      description: "This can only be done by the logged in user."
      operationId: "updateUser"
      produces:
      - "application/json"
      parameters:
      - name: "username"
        in: "path"
        description: "name that need to be updated"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        description: "Updated user object"
        required: true
        schema:
          $ref: "#/definitions/User"
      responses:
        "200":
          description: "Successful"
        "400":
          description: "Invalid user supplied"
        "404":
          description: "User not found"
      security:
      - api_key: []
    delete:
      tags:
      - "user"
      summary: "Delete user"
      description: "This can only be done by the logged in user."
      operationId: "deleteUser"
      produces:
      - "application/json"
      parameters:
      - name: "username"
        in: "path"
        description: "The name that needs to be deleted"
        required: true
        type: "string"
      responses:
        "200":
          description: "Successful"
        "400":
          description: "Invalid username supplied"
        "404":
          description: "User not found"
      security:
      - api_key: []
          
  /board:
    get:
      tags:
      - "board"
      summary: "Find all global advertisement"
      description: "Returns advertisements"
      operationId: "getAllAdvertisements"
      produces:
      - "application/json"
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "object"
            additionalProperties:
              type: "integer"
              format: "int32"

  /board/{userPlaceId}:
    get:
      tags:
      - "board"
      summary: "Find all local advertisement by place"
      description: "Returns local advertisements by place"
      operationId: "getAllAdvertisementsByPlace"
      produces:
      - "application/json"
      parameters:
      - name: "userPlaceId"
        in: "path"
        description: "ID of userPlace"
        required: true
        type: "integer"
        format: "int64"
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "object"
            additionalProperties:
              type: "integer"
              format: "int32"
      security:
      - api_key: []
          
securityDefinitions:
  petstore_auth:
    type: "oauth2"
    authorizationUrl: "http://petstore.swagger.io/oauth/dialog"
    flow: "implicit"
    scopes:
      write:advertisements: "modify advertisements in your account"
      read:advertisements: "read your advertisements"
  api_key:
    type: "apiKey"
    name: "api_key"
    in: "header"

definitions:
  Advertisement:
    type: "object"
    required:
    - "productId"
    - "userId"
    - "quantity"
    - "createDate"
    - "updateDate"
    - "status"
    - "tag"
    - "userPlaceId"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
      description:
        type: "string"
      photoUrls:
        type: "array"
        xml:
          name: "photoUrl"
          wrapped: true
        items:
          type: "string"
      userId:
        type: "integer"
        format: "int64"
      quantity:
        type: "integer"
        format: "int32"
      createDate:
        type: "string"
        format: "date-time"
      updateDate:
        type: "string"
        format: "date-time"
      status:
        type: "string"
        description: "Advertisement status in the Advertisement Board"
        enum:
        - "available"
        - "sold"
      tag:
        type: "string"
        description: "Local or global Advertisement"
        enum:
        - "global"
        - "local"
      userPlaceId:
        type: "integer"
        format: "int64"
    xml:
      name: "Order"

  User:
    type: "object"
    required:
    - "username"
    - "firstName"
    - "lastName"
    - "email"
    - "password"
    - "placeId"
    properties:
      id:
        type: "integer"
        format: "int64"
      username:
        type: "string"
      firstName:
        type: "string"
      lastName:
        type: "string"
      email:
        type: "string"
      password:
        type: "string"
      phone:
        type: "string"
      placeId:
        type: "string"
    xml:
      name: "User"

  Place:
    type: "object"
    required:
    - "name"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
    xml:
      name: "Place"

  # Product:
  #   type: "object"
  #   required:
  #   - "name"
  #   - "photoUrls"
  #   properties:
  #     id:
  #       type: "integer"
  #       format: "int64"
  #     name:
  #       type: "string"
  #     description:
  #       type: "string"
  #     photoUrls:
  #       type: "array"
  #       xml:
  #         name: "photoUrl"
  #         wrapped: true
  #       items:
  #         type: "string"
